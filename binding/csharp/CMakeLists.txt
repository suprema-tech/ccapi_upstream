set(NAME binding_csharp)
project(${NAME})
set(SWIG_TARGET_NAME ccapi_${NAME})

# Find dotnet cli
find_program(DOTNET_EXECUTABLE NAMES dotnet REQUIRED)
if(NOT DOTNET_EXECUTABLE)
  message(FATAL_ERROR "Check for dotnet Program: not found")
else()
  message(STATUS "Found dotnet Program: ${DOTNET_EXECUTABLE}")
endif()

execute_process(
  COMMAND ${DOTNET_EXECUTABLE} --version
  OUTPUT_VARIABLE DOTNET_EXECUTABLE_VERSION
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
message(STATUS "Dotnet version: ${DOTNET_EXECUTABLE_VERSION}")

set(CSHARP_NAMESPACE "ccapi")

set_property(SOURCE ${SWIG_INTERFACE} PROPERTY CPLUSPLUS ON)
set_property(SOURCE ${SWIG_INTERFACE} PROPERTY COMPILE_OPTIONS "-namespace;${CSHARP_NAMESPACE};-dllimport;${SWIG_TARGET_NAME}.so")

swig_add_library(${SWIG_TARGET_NAME}
  LANGUAGE csharp
  OUTPUT_DIR ${CMAKE_BINARY_DIR}/csharp/${SWIG_TARGET_NAME}
SOURCES ${SWIG_INTERFACE} ${SOURCE_LOGGER})

if(NOT CCAPI_LEGACY_USE_WEBSOCKETPP)
  add_dependencies(${SWIG_TARGET_NAME} boost rapidjson hffix)
endif()

set(PACKAGING_DIR packaging)
set(PACKAGING_DIR_FULL ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGING_DIR}/${BUILD_VERSION})
file(MAKE_DIRECTORY ${PACKAGING_DIR_FULL})
set(SRC_DIR_FULL ${CMAKE_CURRENT_BINARY_DIR}/src)
file(MAKE_DIRECTORY ${SRC_DIR_FULL})
configure_file(
  ccapi.csproj.in
  ${SRC_DIR_FULL}/ccapi.csproj
  @ONLY)
set(CSHARP_PACKAGING_TARGET_NAME csharp_${PACKAGING_DIR})
add_custom_target(${CSHARP_PACKAGING_TARGET_NAME} ALL
  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/${SWIG_TARGET_NAME}/*.cs ${SRC_DIR_FULL}
  COMMAND ${DOTNET_EXECUTABLE} build -c ${CMAKE_BUILD_TYPE} -o ${PACKAGING_DIR_FULL} ccapi.csproj
  COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${SWIG_TARGET_NAME}> ${PACKAGING_DIR_FULL}
  WORKING_DIRECTORY ${SRC_DIR_FULL}
)
add_dependencies(${CSHARP_PACKAGING_TARGET_NAME} ${SWIG_TARGET_NAME})
